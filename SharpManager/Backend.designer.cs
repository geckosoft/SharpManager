#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharpManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SharpManager")]
	public partial class BackendDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGebruiker(Gebruiker instance);
    partial void UpdateGebruiker(Gebruiker instance);
    partial void DeleteGebruiker(Gebruiker instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertTelefoonnummer(Telefoonnummer instance);
    partial void UpdateTelefoonnummer(Telefoonnummer instance);
    partial void DeleteTelefoonnummer(Telefoonnummer instance);
    #endregion
		
		public BackendDataContext() : 
				base(global::SharpManager.Properties.Settings.Default.SharpManagerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BackendDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackendDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackendDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackendDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Gebruiker> Gebruikers
		{
			get
			{
				return this.GetTable<Gebruiker>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Telefoonnummer> Telefoonnummers
		{
			get
			{
				return this.GetTable<Telefoonnummer>();
			}
		}
	}
	
	[Table(Name="dbo.gebruikers")]
	public partial class Gebruiker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _GebruikerId;
		
		private string _GebruikerNaam;
		
		private string _Naam;
		
		private string _Voornaam;
		
		private System.DateTime _GeboorteDatum;
		
		private System.Nullable<System.DateTime> _LaatsteLogin;
		
		private int _AantalLogins;
		
		private EntitySet<Telefoonnummer> _Telefoonnummers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGebruikerIdChanging(byte value);
    partial void OnGebruikerIdChanged();
    partial void OnGebruikerNaamChanging(string value);
    partial void OnGebruikerNaamChanged();
    partial void OnNaamChanging(string value);
    partial void OnNaamChanged();
    partial void OnVoornaamChanging(string value);
    partial void OnVoornaamChanged();
    partial void OnGeboorteDatumChanging(System.DateTime value);
    partial void OnGeboorteDatumChanged();
    partial void OnLaatsteLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLaatsteLoginChanged();
    partial void OnAantalLoginsChanging(int value);
    partial void OnAantalLoginsChanged();
    #endregion
		
		public Gebruiker()
		{
			this._Telefoonnummers = new EntitySet<Telefoonnummer>(new Action<Telefoonnummer>(this.attach_Telefoonnummers), new Action<Telefoonnummer>(this.detach_Telefoonnummers));
			OnCreated();
		}
		
		[Column(Storage="_GebruikerId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte GebruikerId
		{
			get
			{
				return this._GebruikerId;
			}
			set
			{
				if ((this._GebruikerId != value))
				{
					this.OnGebruikerIdChanging(value);
					this.SendPropertyChanging();
					this._GebruikerId = value;
					this.SendPropertyChanged("GebruikerId");
					this.OnGebruikerIdChanged();
				}
			}
		}
		
		[Column(Storage="_GebruikerNaam", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string GebruikerNaam
		{
			get
			{
				return this._GebruikerNaam;
			}
			set
			{
				if ((this._GebruikerNaam != value))
				{
					this.OnGebruikerNaamChanging(value);
					this.SendPropertyChanging();
					this._GebruikerNaam = value;
					this.SendPropertyChanged("GebruikerNaam");
					this.OnGebruikerNaamChanged();
				}
			}
		}
		
		[Column(Storage="_Naam", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Naam
		{
			get
			{
				return this._Naam;
			}
			set
			{
				if ((this._Naam != value))
				{
					this.OnNaamChanging(value);
					this.SendPropertyChanging();
					this._Naam = value;
					this.SendPropertyChanged("Naam");
					this.OnNaamChanged();
				}
			}
		}
		
		[Column(Storage="_Voornaam", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Voornaam
		{
			get
			{
				return this._Voornaam;
			}
			set
			{
				if ((this._Voornaam != value))
				{
					this.OnVoornaamChanging(value);
					this.SendPropertyChanging();
					this._Voornaam = value;
					this.SendPropertyChanged("Voornaam");
					this.OnVoornaamChanged();
				}
			}
		}
		
		[Column(Storage="_GeboorteDatum", DbType="DateTime NOT NULL")]
		public System.DateTime GeboorteDatum
		{
			get
			{
				return this._GeboorteDatum;
			}
			set
			{
				if ((this._GeboorteDatum != value))
				{
					this.OnGeboorteDatumChanging(value);
					this.SendPropertyChanging();
					this._GeboorteDatum = value;
					this.SendPropertyChanged("GeboorteDatum");
					this.OnGeboorteDatumChanged();
				}
			}
		}
		
		[Column(Storage="_LaatsteLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LaatsteLogin
		{
			get
			{
				return this._LaatsteLogin;
			}
			set
			{
				if ((this._LaatsteLogin != value))
				{
					this.OnLaatsteLoginChanging(value);
					this.SendPropertyChanging();
					this._LaatsteLogin = value;
					this.SendPropertyChanged("LaatsteLogin");
					this.OnLaatsteLoginChanged();
				}
			}
		}
		
		[Column(Storage="_AantalLogins", DbType="Int NOT NULL")]
		public int AantalLogins
		{
			get
			{
				return this._AantalLogins;
			}
			set
			{
				if ((this._AantalLogins != value))
				{
					this.OnAantalLoginsChanging(value);
					this.SendPropertyChanging();
					this._AantalLogins = value;
					this.SendPropertyChanged("AantalLogins");
					this.OnAantalLoginsChanged();
				}
			}
		}
		
		[Association(Name="Gebruiker_Telefoonnummer", Storage="_Telefoonnummers", ThisKey="GebruikerId", OtherKey="ToegevoegdDoor")]
		public EntitySet<Telefoonnummer> Telefoonnummers
		{
			get
			{
				return this._Telefoonnummers;
			}
			set
			{
				this._Telefoonnummers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Telefoonnummers(Telefoonnummer entity)
		{
			this.SendPropertyChanging();
			entity.Gebruiker = this;
		}
		
		private void detach_Telefoonnummers(Telefoonnummer entity)
		{
			this.SendPropertyChanging();
			entity.Gebruiker = null;
		}
	}
	
	[Table(Name="dbo.Contacten")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactId;
		
		private string _Naam;
		
		private string _Voornaam;
		
		private string _Bedrijf;
		
		private string _Adres;
		
		private string _Postcode;
		
		private string _Gemeente;
		
		private EntitySet<Telefoonnummer> _Telefoonnummers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnNaamChanging(string value);
    partial void OnNaamChanged();
    partial void OnVoornaamChanging(string value);
    partial void OnVoornaamChanged();
    partial void OnBedrijfChanging(string value);
    partial void OnBedrijfChanged();
    partial void OnAdresChanging(string value);
    partial void OnAdresChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnGemeenteChanging(string value);
    partial void OnGemeenteChanged();
    #endregion
		
		public Contact()
		{
			this._Telefoonnummers = new EntitySet<Telefoonnummer>(new Action<Telefoonnummer>(this.attach_Telefoonnummers), new Action<Telefoonnummer>(this.detach_Telefoonnummers));
			OnCreated();
		}
		
		[Column(Storage="_ContactId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_Naam", DbType="VarChar(128)")]
		public string Naam
		{
			get
			{
				return this._Naam;
			}
			set
			{
				if ((this._Naam != value))
				{
					this.OnNaamChanging(value);
					this.SendPropertyChanging();
					this._Naam = value;
					this.SendPropertyChanged("Naam");
					this.OnNaamChanged();
				}
			}
		}
		
		[Column(Storage="_Voornaam", DbType="VarChar(128)")]
		public string Voornaam
		{
			get
			{
				return this._Voornaam;
			}
			set
			{
				if ((this._Voornaam != value))
				{
					this.OnVoornaamChanging(value);
					this.SendPropertyChanging();
					this._Voornaam = value;
					this.SendPropertyChanged("Voornaam");
					this.OnVoornaamChanged();
				}
			}
		}
		
		[Column(Storage="_Bedrijf", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Bedrijf
		{
			get
			{
				return this._Bedrijf;
			}
			set
			{
				if ((this._Bedrijf != value))
				{
					this.OnBedrijfChanging(value);
					this.SendPropertyChanging();
					this._Bedrijf = value;
					this.SendPropertyChanged("Bedrijf");
					this.OnBedrijfChanged();
				}
			}
		}
		
		[Column(Storage="_Adres", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Adres
		{
			get
			{
				return this._Adres;
			}
			set
			{
				if ((this._Adres != value))
				{
					this.OnAdresChanging(value);
					this.SendPropertyChanging();
					this._Adres = value;
					this.SendPropertyChanged("Adres");
					this.OnAdresChanged();
				}
			}
		}
		
		[Column(Storage="_Postcode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Postcode
		{
			get
			{
				return this._Postcode;
			}
			set
			{
				if ((this._Postcode != value))
				{
					this.OnPostcodeChanging(value);
					this.SendPropertyChanging();
					this._Postcode = value;
					this.SendPropertyChanged("Postcode");
					this.OnPostcodeChanged();
				}
			}
		}
		
		[Column(Storage="_Gemeente", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Gemeente
		{
			get
			{
				return this._Gemeente;
			}
			set
			{
				if ((this._Gemeente != value))
				{
					this.OnGemeenteChanging(value);
					this.SendPropertyChanging();
					this._Gemeente = value;
					this.SendPropertyChanged("Gemeente");
					this.OnGemeenteChanged();
				}
			}
		}
		
		[Association(Name="Contact_Telefoonnummer", Storage="_Telefoonnummers", ThisKey="ContactId", OtherKey="ContactId")]
		public EntitySet<Telefoonnummer> Telefoonnummers
		{
			get
			{
				return this._Telefoonnummers;
			}
			set
			{
				this._Telefoonnummers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Telefoonnummers(Telefoonnummer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Telefoonnummers(Telefoonnummer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[Table(Name="dbo.Telefoonnummer")]
	public partial class Telefoonnummer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NummerId;
		
		private int _ContactId;
		
		private string _NummerType;
		
		private string _Nummer;
		
		private byte _ToegevoegdDoor;
		
		private System.DateTime _ToegevoegdOp;
		
		private EntityRef<Gebruiker> _Gebruiker;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNummerIdChanging(int value);
    partial void OnNummerIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnNummerTypeChanging(string value);
    partial void OnNummerTypeChanged();
    partial void OnNummerChanging(string value);
    partial void OnNummerChanged();
    partial void OnToegevoegdDoorChanging(byte value);
    partial void OnToegevoegdDoorChanged();
    partial void OnToegevoegdOpChanging(System.DateTime value);
    partial void OnToegevoegdOpChanged();
    #endregion
		
		public Telefoonnummer()
		{
			this._Gebruiker = default(EntityRef<Gebruiker>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[Column(Storage="_NummerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NummerId
		{
			get
			{
				return this._NummerId;
			}
			set
			{
				if ((this._NummerId != value))
				{
					this.OnNummerIdChanging(value);
					this.SendPropertyChanging();
					this._NummerId = value;
					this.SendPropertyChanged("NummerId");
					this.OnNummerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_NummerType", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string NummerType
		{
			get
			{
				return this._NummerType;
			}
			set
			{
				if ((this._NummerType != value))
				{
					this.OnNummerTypeChanging(value);
					this.SendPropertyChanging();
					this._NummerType = value;
					this.SendPropertyChanged("NummerType");
					this.OnNummerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Nummer", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Nummer
		{
			get
			{
				return this._Nummer;
			}
			set
			{
				if ((this._Nummer != value))
				{
					this.OnNummerChanging(value);
					this.SendPropertyChanging();
					this._Nummer = value;
					this.SendPropertyChanged("Nummer");
					this.OnNummerChanged();
				}
			}
		}
		
		[Column(Storage="_ToegevoegdDoor", DbType="TinyInt NOT NULL")]
		public byte ToegevoegdDoor
		{
			get
			{
				return this._ToegevoegdDoor;
			}
			set
			{
				if ((this._ToegevoegdDoor != value))
				{
					if (this._Gebruiker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToegevoegdDoorChanging(value);
					this.SendPropertyChanging();
					this._ToegevoegdDoor = value;
					this.SendPropertyChanged("ToegevoegdDoor");
					this.OnToegevoegdDoorChanged();
				}
			}
		}
		
		[Column(Storage="_ToegevoegdOp", DbType="DateTime NOT NULL")]
		public System.DateTime ToegevoegdOp
		{
			get
			{
				return this._ToegevoegdOp;
			}
			set
			{
				if ((this._ToegevoegdOp != value))
				{
					this.OnToegevoegdOpChanging(value);
					this.SendPropertyChanging();
					this._ToegevoegdOp = value;
					this.SendPropertyChanged("ToegevoegdOp");
					this.OnToegevoegdOpChanged();
				}
			}
		}
		
		[Association(Name="Gebruiker_Telefoonnummer", Storage="_Gebruiker", ThisKey="ToegevoegdDoor", OtherKey="GebruikerId", IsForeignKey=true)]
		public Gebruiker Gebruiker
		{
			get
			{
				return this._Gebruiker.Entity;
			}
			set
			{
				Gebruiker previousValue = this._Gebruiker.Entity;
				if (((previousValue != value) 
							|| (this._Gebruiker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gebruiker.Entity = null;
						previousValue.Telefoonnummers.Remove(this);
					}
					this._Gebruiker.Entity = value;
					if ((value != null))
					{
						value.Telefoonnummers.Add(this);
						this._ToegevoegdDoor = value.GebruikerId;
					}
					else
					{
						this._ToegevoegdDoor = default(byte);
					}
					this.SendPropertyChanged("Gebruiker");
				}
			}
		}
		
		[Association(Name="Contact_Telefoonnummer", Storage="_Contact", ThisKey="ContactId", OtherKey="ContactId", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Telefoonnummers.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Telefoonnummers.Add(this);
						this._ContactId = value.ContactId;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
